@page "/invoice/{productBillId:int}"
@using BanSach.Components.Model
@using BanSach.Components.IService
@inject ICartService CartService
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@using System.Globalization

<MudGrid Class="pt-2">
    <MudItem xs="12" sm="12">
        @if (productBill != null)
        {
            <MudGrid>
                <MudItem xs="12" sm="12" md="12">
                    <div style="font-weight: bold; font-size: 1.5em;">Hóa Đơn</div>
                    <div><strong>ID Hóa Đơn:</strong> @productBill.ProductBillId</div>
                    <div><strong>Tổng Tiền:</strong> @string.Format(new CultureInfo("vi-VN"), "{0:N0}", productBill.Price) vnđ</div>
                    <div><strong>Sản Phẩm:</strong> @productBill.FeaturePId</div>
                    <div><strong>Số Lượng:</strong> @productBill.Quantity</div>
                    <div><strong>Ngày Tạo:</strong> @productBill.Created</div>
                    <br />
                    <MudText Typo="Typo.h6" Class="mud-width-full">@(pay == null ? "Nothing selected." : $"Pay: {pay.Name}")</MudText>

                    <MudSelect T="Pay" @bind-Value="pay" ToStringFunc="@converter" Label="Chọn phương thức thanh toán" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
                        <MudSelectItem Value="@(new Pay() { Name="Tiền mặt"})" />
                        <MudSelectItem Value="@(new Pay() { Name="Ví điện tử"})" />
                    </MudSelect>

                    <br />

                    <!-- Nút đặt hàng -->
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="PlaceOrder">
                        Đặt hàng
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudText Color="Color.Error">Hóa đơn không tồn tại.</MudText>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter] public int productBillId { get; set; }
    private Product_bill productBill;
    private Pay pay = new Pay { Name = "Tiền mặt" };  // Mặc định là Tiền mặt

    // Hàm này giúp converter giá trị của Pay để hiển thị trong MudSelect
    Func<Pay, string> converter = p => p?.Name;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productBill = await CartService.GetProductBillById(productBillId);
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể tải hóa đơn: {ex.Message}");
        }
    }

    private async Task PlaceOrder()
    {
        // Kiểm tra nếu người dùng chưa chọn phương thức thanh toán
        if (pay == null || string.IsNullOrEmpty(pay.Name))
        {
            DialogService.ShowMessageBox("Lỗi", "Vui lòng chọn phương thức thanh toán.");
            return;
        }

        try
        {
            // Gọi phương thức xử lý thanh toán
            var paymentResult = await CartService.ProcessPayment(productBill.ProductBillId, pay.Name);

            if (paymentResult.IsSuccess)
            {
                DialogService.ShowMessageBox("Thành Công", $"Đơn hàng đã được đặt thành công với phương thức: {pay.Name}");
                navigationManager.NavigateTo("/?message=" + Uri.EscapeDataString("Đơn hàng đã được đặt thành công với phương thức: " + pay.Name));

            }
            else
            {
                
                DialogService.ShowMessageBox("Lỗi", paymentResult.Message);
            }
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Đã xảy ra lỗi: {ex.Message}");
        }
    }

    // Lớp để lưu thông tin phương thức thanh toán
    public class Pay
    {
        public string Name { get; set; }

        public override bool Equals(object o)
        {
            var other = o as Pay;
            return other?.Name == Name;
        }

        public override int GetHashCode() => Name.GetHashCode();
    }
}
