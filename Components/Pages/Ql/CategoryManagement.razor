@page "/Ql/Category"
@using BanSach.Components.Dialog.QlDanhmuc
@using BanSach.Components.IService
@using BanSach.Components.Services
@using BanSach.Components.Model
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject IItemManagement ItemManagement
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject IDialogService DialogService
<div style="display:flex; justify-content: space-between; padding: 30px 30px 0 30px;">
    <h2 style="font-family:Arial;font-weight: bold">Quản lý danh mục</h2>
    <MudButton OnClick="@((e) => CreateAsync(category))" style="color:darkblue">Thêm</MudButton>
</div>
<MudTable Dense="true" Breakpoint="Breakpoint.None" Style="white-space:nowrap" Bordered="true" Striped="true"
          Items="@categories" SortMode="SortMode.Multiple" Hover="true">
    <HeaderContent>
        <MudTh>STT</MudTh>
        <MudTh>Tên danh mục</MudTh>
        <MudTh>Ảnh</MudTh>
        <MudTh>Sửa</MudTh>
        <MudTh>Xóa</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="STT"></MudTd>
        <MudTd DataLabel="Tên danh mục">
            <span>@context.CategoryName</span>
        </MudTd>
        <MudTd DataLabel="Ảnh">
            <MudImage ObjectFit="ObjectFit.Cover" Width="70" Height="55" Src="@context.Img" Class="rounded-lg" />
        </MudTd>
         <MudTd DataLabel="Sửa">
            <MudButton style="padding: 10px;background:blue; color:white" Variant="Variant.Text" OnClick="@((e) => UpdateAsync(context))">Sửa</MudButton>
        </MudTd> 

        <MudTd DataLabel="Xóa">
            <MudButton style="padding: 10px;background: red; color:white" Variant="Variant.Filled" OnClick="@((e) => DeleteAsync(context))">Xóa</MudButton>
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<style>
    .table{
        font-family:Arial;

    }
</style>
@code {
    private Product product = new Product();
    private List<Product> products = new List<Product>();
    private Category category = new Category();
    private List<Category> categories = new List<Category>();
    bool success;
    string errorMessage = "";
    string successMessage = "";
    protected override async Task OnInitializedAsync()
    {
        categories = await ItemManagement.GetAllCategogy();
        System.Diagnostics.Debug.WriteLine("Số lượng danh mục: " + categories.Count);
    }
    private async Task delete(Category category)
    {
        await ItemManagement.DeleteCategory(category); // Gọi để xóa, không gán
        await InvokeAsync(StateHasChanged); // Cập nhật giao diện
    }


    // sử lí dialog xóa danh mục
    private async Task DeleteAsync(Category category)
    {
        var parameters = new DialogParameters<DeleteConfirmDiaLog> { { x => x.category, category } };

        var dialog = await DialogService.ShowAsync<DeleteConfirmDiaLog>("Delete category", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            delete(category);
        }

    }
    // update danh mục
    private async Task Update(Category category)
    {
        DateTime thoiGian = DateTime.Now;
        category.Updated_at = thoiGian;
        await ItemManagement.EditCategory(category); 
        await InvokeAsync(StateHasChanged); 
    }
    // xử lí dialog sửa danh mục
    private async Task UpdateAsync(Category category)
    {
        System.Diagnostics.Debug.WriteLine("update");
        var parameters = new DialogParameters<UpdateDiaLog> { { x => x.category, category} };

        var dialog = await DialogService.ShowAsync<UpdateDiaLog>("Update sp", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await Update(category);
        }
    }

    // tạo sản phẩm
    private async Task Create(Category category)
    {
        if (category == null)
        {
            throw new ArgumentNullException(nameof(category), "category cannot be null.");
        }

        // Kiểm tra điều kiện trước khi thêm sản phẩm
        if (categories.Any(p => p.CategoryName.Equals(category.CategoryName, StringComparison.OrdinalIgnoreCase)))
        {
            errorMessage = "Tên danh mục đã tồn tại.";
            success = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(category.CategoryName))
        {
            errorMessage = "Tên danh mục không được để trống.";
            success = false;
            return;
        }
        DateTime thoiGian = DateTime.Now;
        category.Created_at = thoiGian;
        await ItemManagement.CreateCategory(category);
    }
    // sử lí dialog tạo sản phẩm
    private async Task CreateAsync(Category category)
    {
        var dialog = await DialogService.ShowAsync<CreateDiaLog>("Create category");
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await Create(category);
        }
    }
}



