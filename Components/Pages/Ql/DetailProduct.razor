@page "/Ql/Detail/{productId:int}"
@using BanSach.Components.Model
@using BanSach.Components.Services
@using BanSach.Components.IService
@using Microsoft.AspNetCore.Http
@using System.IO
@inject IWebHostEnvironment Environment
@inject NavigationManager navigationManager
@inject IItemManagement ItemManagement
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<div style="display:flex;  justify-content:center ;padding: 30px 30px 0 30px; text-align:center">
    <h2 style="font-family:Arial;">THÔNG TIN SÁCH</h2>
</div>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                @if (product != null)
                {
                    <MudGrid>
                        <MudItem xs="12" sm="12">
                            <MudCard>
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Tên" @bind-Value="product.ProductName" />
                                        </MudItem>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Tác giả " @bind-Value="product.Author" />
                                        </MudItem>

                                    </MudGrid>
                                    <MudItem xs="12" sm="12" md="12">
                                        <MudTextField ShrinkLabel Variant="Variant.Outlined" Rows="4" Style="width: 100%;" AutoComplete Multiline="true" Label="Mô tả" @bind-Value="product.Description" />
                                    </MudItem>
                                    <MudGrid>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Năm sản xuất" @bind-Value="product.Year" />
                                        </MudItem>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Nhà xuất bản" @bind-Value="product.Publisher" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid>
                                        <MudItem xs="4" sm="4" md="4">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Giá gốc" @bind-Value="product.CostPrice" />
                                        </MudItem>
                                        <MudItem xs="4" sm="4" md="4">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Giá bán" @bind-Value="product.SellPrice" />
                                        </MudItem>
                                        <MudItem xs="4" sm="4" md="4">
                                            <MudTextField ShrinkLabel Variant="Variant.Outlined" Label="Số lượng" @bind-Value="product.Quatity" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField ReadOnly Variant="Variant.Outlined" ShrinkLabel Label="Thời gian tạo" @bind-Value="product.Created" />
                                        </MudItem>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField ReadOnly Variant="Variant.Outlined" ShrinkLabel Label="Thời gian sửa" @bind-Value="product.Updated" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid>

                                        <MudItem xs="6" md="6">
                                            <MudSelect ShrinkLabel Label="Danh mục" Dense="true" Variant="Variant.Outlined" T="int" @bind-Value="product.CategoryId">
                                                @foreach (var category in Categories)
                                                {
                                                    <MudSelectItem Value="@category.CategoryId">
                                                        <MudText Class="mb-1">@category.CategoryName</MudText>
                                                    </MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField Variant="Variant.Outlined" ShrinkLabel Label="Số trang" @bind-Value="product.PageNumber" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid>
                                        <MudItem xs="6" sm="6" md="6">
                                            <MudTextField Variant="Variant.Outlined" ShrinkLabel Label="Ảnh" @bind-Value="product.Img" />
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="10" sm="10">
                            <MudPaper Class="pa-4 mud-height-full">

                                @if (success)
                                {
                                    <MudText Color="Color.Success">Success</MudText>
                                }
                                else
                                {
                                    <MudText Color="@Color.Error">

                                    </MudText>
                                }
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <MudText Color="Color.Error">Sản phẩm không tồn tại.</MudText>
                }

            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="Delete">Xóa</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="edit">Sửa</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>
@if (!string.IsNullOrEmpty(successMessage) || !string.IsNullOrEmpty(errorMessage))
{
    <MudContainer Class="mt-3">
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <MudAlert Severity="Severity.Success">@successMessage</MudAlert>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Warning">@errorMessage</MudAlert>
        }
    </MudContainer>
}
@code {
    public int categoryId;
    public string? categoryName;
    private Product? product;
    private Category category = new Category();
    private List<Category> Categories = new List<Category>();
    public List<Product> products = new List<Product>();
    bool success;
    string errorMessage = "";
    string successMessage = "";
    [Parameter]
    public int productId { get; set; }
    private List<string> uploadedImages = new List<string>();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();

    public async Task<Product> GetProduct()
    {
        var product = await ItemManagement.GetItemById(productId);
        // if (product == null)
        // {
        //     throw new Exception("Product not found");
        // }
        return product;
    }

    public async Task<Category> GetCategory()
    {
        var category = await ItemManagement.GetCategoryById(categoryId);
        if (category == null)
        {
            throw new Exception("Category not found");
        }
        return category;
    }
    protected override async Task OnInitializedAsync()
    {
        product = await GetProduct();
        categoryId = product.CategoryId;
        category = await GetCategory();
        categoryName = category.CategoryName;

        try
        {
            Categories = await ItemManagement.GetAllCategogy();
            System.Diagnostics.Debug.WriteLine("Số lượng danh mục: " + Categories.Count);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Lỗi trong OnInitializedAsync: " + ex.Message);
        }
    }

    private async Task edit()
    {
        if (product == null) throw new ArgumentNullException(nameof(product), "product cannot be null.");

        try
        {
            product.Updated = DateTime.Now;
            await ItemManagement.EditItem(product);
            success = true;
            navigationManager.NavigateTo("/Ql/Product");
        }
        catch (Exception ex)
        {
            errorMessage = "Lỗi khi sửa sản phẩm: " + ex.Message;
            success = false;
        }


    }
    private async Task Delete()
    {
        if (product == null)
        {
            throw new ArgumentNullException(nameof(product), "Sản phẩm không tồn tại.");
        }

        try
        {
            // Xác nhận trước khi xóa

            await ItemManagement.DeleteItem(product);
            // Thực hiện các hành động khác sau khi xóa (như chuyển hướng hoặc cập nhật giao diện)

        }
        catch (Exception ex)
        {
            errorMessage = "Lỗi khi xóa sản phẩm: " + ex.Message;
        }
    }


}