@page "/Ql/Product"
 @using System.Data
@using System.Diagnostics.Metrics
@using BanSach.Components.IService
@using BanSach.Components.Model
@using System.Globalization
@using BanSach.Components.Services
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject IItemManagement ItemManagement
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject IDialogService DialogService
<div style="display:flex; justify-content: space-between; padding: 30px 30px 0 30px;">
    <h2 style="font-family:Arial;">Quản lý sách</h2>
    </div>
<MudTable Items="@products" Filter="new Func<Product,bool>(FilterFunc1)" Dense="true" Breakpoint="Breakpoint.None" Virtualize="true"
          Style="white-space:nowrap" Bordered="true" RowClass="cursor-pointer" Striped="true" Hover="true" HorizontalScrollbar="true">
    <ToolBarContent>
        <MudButton OnClick="AddProduct" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Thêm</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>STT</MudTh>
        <MudTh>Tên</MudTh>
        <MudTh>Giá bán</MudTh>
        <MudTh>Tác giả</MudTh>
        <MudTh>Nhà xuất bản</MudTh>
        <MudTh>Số lượng</MudTh>
        <MudTh>Ảnh bìa</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="STT">
            <div @onclick="@(()=>DetailProduct(context.ProductId))">
               @context.ProductId
            </div>
        </MudTd>
        <MudTd DataLabel="Tên"><div @onclick="@(()=>DetailProduct(context.ProductId))">@context.ProductName</div></MudTd>
        <MudTd DataLabel="Giá bán">
            <div @onclick="@(()=>DetailProduct(context.ProductId))">@string.Format(new CultureInfo("vi-VN"), "{0:N0}", context.SellPrice)</div>
        </MudTd>
        <MudTd DataLabel="Tác giả"><div @onclick="@(()=>DetailProduct(context.ProductId))">@context.Author</div></MudTd>
        <MudTd DataLabel="Nhà xuất bản"><div @onclick="@(()=>DetailProduct(context.ProductId))">@context.Publisher</div></MudTd>
        <MudTd DataLabel="Số lượng"><div @onclick="@(()=>DetailProduct(context.ProductId))">@context.Quantity</div></MudTd>
        <MudTd DataLabel="Ảnh bìa">
            <MudImage ObjectFit="ObjectFit.Cover" Width="50" Height="30" Src="@context.Img" Class="rounded-lg" />
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSize="10" @bind-PageIndex="@pageIndex" OnPageChanged="SetPage" />
    </PagerContent>
</MudTable>
@code{
    private Category category = new Category();
    private List<Category> categories = new List<Category>();
    public List<Product> products = new List<Product>();
   
    public Product product = new Product();
    private string resultMessage = string.Empty;
    private string searchString1 = "";
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Product> PaginatedData => Products.Skip((pageIndex - 1) * pageSize).Take(pageSize);
    private int pageSize = 10;
    private int pageIndex = 1;

    private void SetPage(int index)
    {
        pageIndex = index;
    }
    private async Task<List<Product>> getAllSach() => await ItemManagement.GetAllItem();

    
    protected override async Task OnInitializedAsync()
    {
        products = await getAllSach();
        
        System.Diagnostics.Debug.WriteLine("Số lượng sản phẩm: " + products.Count); // Kiểm tra xem có bao nhiêu sản phẩm được trả về
        System.Diagnostics.Debug.WriteLine("1");
        categories = await ItemManagement.GetAllCategogy();
         System.Diagnostics.Debug.WriteLine("Số lượng danh mục: " + categories.Count); // Kiểm tra xem có bao nhiêu sản phẩm được trả về
    //     System.Diagnostics.Debug.WriteLine("1");
    }
    // tìm kiếm
    private bool FilterFunc1(Product Product) => FilterFunc(Product, searchString1);

    private bool FilterFunc(Product? product, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (product == null)
            return false; 

        if (product.ProductName != null &&
            product.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        string combinedValues = $"{product.CostPrice} {product.SellPrice} {product.CategoryId} ";
        return combinedValues.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void AddProduct()
    {
        navigationManager.NavigateTo("/Ql/add");
    }
    private void DetailProduct( int productId)
    {
        navigationManager.NavigateTo($"/{productId}");
    }
}

 