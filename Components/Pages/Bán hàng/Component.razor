@page "/cart"
@using System.Security.Claims
@using BanSach.Components.Model
@using BanSach.Components.Services
@using BanSach.Components.IService
@using Microsoft.AspNetCore.Http
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment Environment
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IItemManagement ItemManagement
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ICartService CartService

<MudGrid Class="pt-2">
    <MudItem xs="12" sm="12">
        @if (product_carts != null && product_carts.Any())
        {
            @foreach (var cartItem in product_carts)
            {
                <MudGrid>
                    <MudItem xs="0" sm="1" md="1"></MudItem>
                    <MudItem xs="4" sm="4" md="4">
                        <MudImage ObjectFit="ObjectFit.Cover" Width="150" Height="150" Src="@cartItem.Product.Img" Class="rounded-lg" />
                    </MudItem>
                    <MudItem md="8" sm="8" xs="8">
                        <div style="padding: 30px">
                            <MudGrid style="display: flex; flex-direction: column;">
                                <MudGrid>
                                    <MudItem Class="pt-1">
                                        <div style="font-weight:bold; padding-top: 10px">@cartItem.Product.ProductName</div>
                                    </MudItem>
                                </MudGrid>
                            </MudGrid>
                            <MudItem Class="pt-1"><div style=" font-weight:bold">@string.Format(new CultureInfo("vi-VN"), "{0:N0}", cartItem.Product.SellPrice) vnđ </div></MudItem>
                            <MudItem>
                                <div style="display: flex; align-items: center;">
                                    Số lượng:
                                    <MudNumericField T="int" @bind-Value="@cartItem.Quantity" Min="1" Style="margin-left: 10px; width: 50px;" />
                                </div>
                            </MudItem>
                            <MudItem>
                                <MudButton Class="pt-1" style="padding:10px" ButtonType="ButtonType.Submit" Variant="Variant.Filled" @onclick="() => HandleBuyNow(cartItem)">Mua hàng</MudButton>
                            </MudItem>
                        </div>
                    </MudItem>
                </MudGrid>
            }
        }
        else
        {
            <MudText Color="Color.Error">Giỏ hàng trống.</MudText>
        }
    </MudItem>
</MudGrid>

@code {
    private List<Product_cart> product_carts = new List<Product_cart>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product_carts = await GetAllProductCart();
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể tải giỏ hàng: {ex.Message}");
        }
    }

    private async Task<List<Product_cart>> GetAllProductCart()
    {
        var carts = await CartService.GetAllPCart();
        if (carts == null || !carts.Any())
        {
            return new List<Product_cart>();
        }
        return carts;
    }

    private async Task HandleBuyNow(Product_cart cartItem)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user == null || !user.Identity.IsAuthenticated)
        {
            DialogService.ShowMessageBox("Lỗi", "Vui lòng đăng nhập để tiếp tục.");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null)
        {
            DialogService.ShowMessageBox("Lỗi", "Không thể xác định người dùng.");
            return;
        }
        int userId = int.Parse(userIdClaim.Value);

        // Log kiểm tra thông tin sản phẩm và số lượng
        Console.WriteLine($"ProductId: {cartItem.ProductId}, Quantity: {cartItem.Quantity}, SellPrice: {cartItem.Product.SellPrice}");

        var productBill = new Product_bill
            {
                FeaturePId = cartItem.ProductId,  // Sử dụng cartItem thay vì product_cart
                Price = cartItem.Quantity * cartItem.Product.SellPrice,  // Sử dụng cartItem thay vì product_cart
                Quantity = cartItem.Quantity,
                Created = DateTime.Now,
                Updated = DateTime.Now,
            };

        // Kiểm tra xem giá trị đã được gán đúng chưa
        Console.WriteLine($"ProductBill - FeaturePId: {productBill.FeaturePId}, Price: {productBill.Price}, Quantity: {productBill.Quantity}");

        var productBillResult = await CartService.PlaceProductBill(productBill);

        if (productBillResult != null)
        {
            Console.WriteLine($"Hóa đơn thành công! ID: {productBillResult.ProductBillId}");
            navigationManager.NavigateTo($"/invoice/{productBillResult.ProductBillId}");
        }
        else
        {
            DialogService.ShowMessageBox("Lỗi", "Đặt hàng không thành công. Vui lòng thử lại.");
        }
    }
}
}
